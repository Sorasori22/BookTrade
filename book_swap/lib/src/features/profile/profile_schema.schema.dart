// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'profile_schema.dart';

part 'profile_schema.schema.freezed.dart';
part 'profile_schema.schema.g.dart';

/// Defines the table structure for Profile.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class ProfileTable {
  const ProfileTable._();

  /// The name of the database table for Profile entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "profiles";

  /// Column: id
  /// This is the primary key column for the Profile table.
  /// Data type: `String`
  /// Key: `id`
  static const String id = "id";

  /// Column: username
  /// Data type: `String`
  /// Key: `username`
  static const String username = "username";

  /// Column: full_name
  /// Data type: `String?`
  /// Key: `full_name`
  static const String fullName = "full_name";

  /// Column: avatar_url
  /// Data type: `String?`
  /// Key: `avatar_url`
  static const String avatarUrl = "avatar_url";

  /// Column: bio
  /// Data type: `String?`
  /// Key: `bio`
  static const String bio = "bio";

  /// Column: location
  /// Data type: `String?`
  /// Key: `location`
  static const String location = "location";

  /// Column: address
  /// Data type: `String?`
  /// Key: `address`
  static const String address = "address";

  /// Column: phone_number
  /// Data type: `String?`
  /// Key: `phone_number`
  static const String phoneNumber = "phone_number";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: updated_at
  /// Data type: `DateTime`
  /// Key: `updated_at`
  static const String updatedAt = "updated_at";
}

/// Represents the unique identifier for a Profile.
/// This class wraps the `String` value, providing type safety and encapsulation.
class ProfileId extends Identity<String> {
  const ProfileId._(this.value);

  @override
  final String value;

  /// Creates an instance of ProfileId from a JSON value.
  /// Accepts String representations.
  /// Throws ArgumentError if the value is null or not of type String.
  factory ProfileId.fromJson(dynamic value) {
    if (value is String) {
      return ProfileId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of ProfileId must be of type String, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of ProfileId from a String value.
  factory ProfileId.fromValue(String value) {
    return ProfileId._(value);
  }
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseProfileSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IProfileModel {
  ProfileId get id;
  String get username;
  String? get fullName;
  String? get avatarUrl;
  String? get bio;
  String? get location;
  String? get address;
  String? get phoneNumber;
  DateTime get createdAt;
  DateTime get updatedAt;
}

/// Base model class for ProfileModel.
@freezed
class ProfileModel
    with _$ProfileModel
    implements BaseProfileSchema, IProfileModel {
  const ProfileModel._();

  /// Constructor for ProfileModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`profiles`)
  ///
  /// Fields:
  /// - ProfileId id : JsonKey('id')
  /// - String username : JsonKey('username')
  /// - String? fullName : JsonKey('full_name')
  /// - String? avatarUrl : JsonKey('avatar_url')
  /// - String? bio : JsonKey('bio')
  /// - String? location : JsonKey('location')
  /// - String? address : JsonKey('address')
  /// - String? phoneNumber : JsonKey('phone_number')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - DateTime updatedAt : JsonKey('updated_at')
  @TableModel(ProfileModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory ProfileModel({
    @JsonKey(name: ProfileModel.idKey) required ProfileId id,
    @JsonKey(name: ProfileModel.usernameKey) required String username,
    @JsonKey(name: ProfileModel.fullNameKey) required String? fullName,
    @JsonKey(name: ProfileModel.avatarUrlKey) required String? avatarUrl,
    @JsonKey(name: ProfileModel.bioKey) required String? bio,
    @JsonKey(name: ProfileModel.locationKey) required String? location,
    @JsonKey(name: ProfileModel.addressKey) required String? address,
    @JsonKey(name: ProfileModel.phoneNumberKey) required String? phoneNumber,
    @JsonKey(name: ProfileModel.createdAtKey) required DateTime createdAt,
    @JsonKey(name: ProfileModel.updatedAtKey) required DateTime updatedAt,
  }) = _ProfileModel;

  /// Creates an instance of ProfileModel from a JSON map.
  factory ProfileModel.fromJson(Map<String, dynamic> json) =>
      _$ProfileModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableProfileModel;

  /// Table name: `profiles`
  static const String tableName = "profiles";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for username field with JsonKey('username')
  static const String usernameKey = "username";

  /// Field name for fullName field with JsonKey('full_name')
  static const String fullNameKey = "full_name";

  /// Field name for avatarUrl field with JsonKey('avatar_url')
  static const String avatarUrlKey = "avatar_url";

  /// Field name for bio field with JsonKey('bio')
  static const String bioKey = "bio";

  /// Field name for location field with JsonKey('location')
  static const String locationKey = "location";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for phoneNumber field with JsonKey('phone_number')
  static const String phoneNumberKey = "phone_number";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for updatedAt field with JsonKey('updated_at')
  static const String updatedAtKey = "updated_at";
}

/// Represents the ProfileLiteModel model. generated by kimapp_generator
@freezed
class ProfileLiteModel with _$ProfileLiteModel implements BaseProfileSchema {
  const ProfileLiteModel._();

  /// Constructor for ProfileLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `profiles`
  ///
  /// Fields:
  /// - ProfileId id : JsonKey('id')
  /// - String username : JsonKey('username')
  /// - String? fullName : JsonKey('full_name')
  /// - String? avatarUrl : JsonKey('avatar_url')
  @TableModel(ProfileLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory ProfileLiteModel({
    @JsonKey(name: ProfileLiteModel.idKey) required ProfileId id,
    @JsonKey(name: ProfileLiteModel.usernameKey) required String username,
    @JsonKey(name: ProfileLiteModel.fullNameKey) required String? fullName,
    @JsonKey(name: ProfileLiteModel.avatarUrlKey) required String? avatarUrl,
  }) = _ProfileLiteModel;

  /// Creates an instance of ProfileLiteModel from a JSON map.
  factory ProfileLiteModel.fromJson(Map<String, dynamic> json) =>
      _$ProfileLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableProfileLiteModel;

  /// Table name: `profiles`
  static const String tableName = "profiles";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for username field with JsonKey('username')
  static const String usernameKey = "username";

  /// Field name for fullName field with JsonKey('full_name')
  static const String fullNameKey = "full_name";

  /// Field name for avatarUrl field with JsonKey('avatar_url')
  static const String avatarUrlKey = "avatar_url";
}

/// Represents the ProfileDetailModel model. generated by kimapp_generator
@freezed
class ProfileDetailModel
    with _$ProfileDetailModel
    implements BaseProfileSchema, IProfileModel {
  const ProfileDetailModel._();

  /// Constructor for ProfileDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `profiles`
  ///
  /// Fields:
  /// - ProfileId id : JsonKey('id')
  /// - String username : JsonKey('username')
  /// - String? fullName : JsonKey('full_name')
  /// - String? avatarUrl : JsonKey('avatar_url')
  /// - String? bio : JsonKey('bio')
  /// - String? location : JsonKey('location')
  /// - String? address : JsonKey('address')
  /// - String? phoneNumber : JsonKey('phone_number')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - DateTime updatedAt : JsonKey('updated_at')
  @TableModel(ProfileDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory ProfileDetailModel({
    @JsonKey(name: ProfileDetailModel.idKey) required ProfileId id,
    @JsonKey(name: ProfileDetailModel.usernameKey) required String username,
    @JsonKey(name: ProfileDetailModel.fullNameKey) required String? fullName,
    @JsonKey(name: ProfileDetailModel.avatarUrlKey) required String? avatarUrl,
    @JsonKey(name: ProfileDetailModel.bioKey) required String? bio,
    @JsonKey(name: ProfileDetailModel.locationKey) required String? location,
    @JsonKey(name: ProfileDetailModel.addressKey) required String? address,
    @JsonKey(name: ProfileDetailModel.phoneNumberKey)
    required String? phoneNumber,
    @JsonKey(name: ProfileDetailModel.createdAtKey) required DateTime createdAt,
    @JsonKey(name: ProfileDetailModel.updatedAtKey) required DateTime updatedAt,
  }) = _ProfileDetailModel;

  /// Creates an instance of ProfileDetailModel from a JSON map.
  factory ProfileDetailModel.fromJson(Map<String, dynamic> json) =>
      _$ProfileDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableProfileDetailModel;

  /// Table name: `profiles`
  static const String tableName = "profiles";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for username field with JsonKey('username')
  static const String usernameKey = "username";

  /// Field name for fullName field with JsonKey('full_name')
  static const String fullNameKey = "full_name";

  /// Field name for avatarUrl field with JsonKey('avatar_url')
  static const String avatarUrlKey = "avatar_url";

  /// Field name for bio field with JsonKey('bio')
  static const String bioKey = "bio";

  /// Field name for location field with JsonKey('location')
  static const String locationKey = "location";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for phoneNumber field with JsonKey('phone_number')
  static const String phoneNumberKey = "phone_number";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for updatedAt field with JsonKey('updated_at')
  static const String updatedAtKey = "updated_at";

  /// Converts this model to a base model.
  ProfileModel toProfileModel() {
    return ProfileModel(
      id: id,
      username: username,
      fullName: fullName,
      avatarUrl: avatarUrl,
      bio: bio,
      location: location,
      address: address,
      phoneNumber: phoneNumber,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
}

/// Represents the ProfileCreateParam model. generated by kimapp_generator
@freezed
class ProfileCreateParam
    with _$ProfileCreateParam
    implements BaseProfileSchema {
  const ProfileCreateParam._();

  /// Constructor for ProfileCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId id : JsonKey('id')
  /// - String username : JsonKey('username')
  /// - String? fullName : JsonKey('full_name')
  /// - String? avatarUrl : JsonKey('avatar_url')
  /// - String? bio : JsonKey('bio')
  /// - String? location : JsonKey('location')
  /// - String? address : JsonKey('address')
  /// - String? phoneNumber : JsonKey('phone_number')
  @JsonSerializable(explicitToJson: true)
  const factory ProfileCreateParam({
    @JsonKey(name: ProfileCreateParam.idKey) required ProfileId id,
    @JsonKey(name: ProfileCreateParam.usernameKey) required String username,
    @JsonKey(name: ProfileCreateParam.fullNameKey) required String? fullName,
    @JsonKey(name: ProfileCreateParam.avatarUrlKey) required String? avatarUrl,
    @JsonKey(name: ProfileCreateParam.bioKey) required String? bio,
    @JsonKey(name: ProfileCreateParam.locationKey) required String? location,
    @JsonKey(name: ProfileCreateParam.addressKey) required String? address,
    @JsonKey(name: ProfileCreateParam.phoneNumberKey)
    required String? phoneNumber,
  }) = _ProfileCreateParam;

  /// Creates an instance of ProfileCreateParam from a JSON map.
  factory ProfileCreateParam.fromJson(Map<String, dynamic> json) =>
      _$ProfileCreateParamFromJson(json);

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for username field with JsonKey('username')
  static const String usernameKey = "username";

  /// Field name for fullName field with JsonKey('full_name')
  static const String fullNameKey = "full_name";

  /// Field name for avatarUrl field with JsonKey('avatar_url')
  static const String avatarUrlKey = "avatar_url";

  /// Field name for bio field with JsonKey('bio')
  static const String bioKey = "bio";

  /// Field name for location field with JsonKey('location')
  static const String locationKey = "location";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for phoneNumber field with JsonKey('phone_number')
  static const String phoneNumberKey = "phone_number";
}

/// Represents the ProfileUpdateParam model. generated by kimapp_generator
@freezed
class ProfileUpdateParam
    with _$ProfileUpdateParam
    implements BaseProfileSchema {
  const ProfileUpdateParam._();

  /// Constructor for ProfileUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - String? username : JsonKey('username')
  /// - String? fullName : JsonKey('full_name')
  /// - String? avatarUrl : JsonKey('avatar_url')
  /// - String? bio : JsonKey('bio')
  /// - String? location : JsonKey('location')
  /// - String? address : JsonKey('address')
  /// - String? phoneNumber : JsonKey('phone_number')
  @JsonSerializable(explicitToJson: true)
  const factory ProfileUpdateParam({
    @JsonKey(name: ProfileUpdateParam.usernameKey) required String? username,
    @JsonKey(name: ProfileUpdateParam.fullNameKey) required String? fullName,
    @JsonKey(name: ProfileUpdateParam.avatarUrlKey) required String? avatarUrl,
    @JsonKey(name: ProfileUpdateParam.bioKey) required String? bio,
    @JsonKey(name: ProfileUpdateParam.locationKey) required String? location,
    @JsonKey(name: ProfileUpdateParam.addressKey) required String? address,
    @JsonKey(name: ProfileUpdateParam.phoneNumberKey)
    required String? phoneNumber,
  }) = _ProfileUpdateParam;

  /// Creates an instance of ProfileUpdateParam from a JSON map.
  factory ProfileUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$ProfileUpdateParamFromJson(json);

  /// Field name for username field with JsonKey('username')
  static const String usernameKey = "username";

  /// Field name for fullName field with JsonKey('full_name')
  static const String fullNameKey = "full_name";

  /// Field name for avatarUrl field with JsonKey('avatar_url')
  static const String avatarUrlKey = "avatar_url";

  /// Field name for bio field with JsonKey('bio')
  static const String bioKey = "bio";

  /// Field name for location field with JsonKey('location')
  static const String locationKey = "location";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for phoneNumber field with JsonKey('phone_number')
  static const String phoneNumberKey = "phone_number";
}
