// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'genre_schema.dart';

part 'genre_schema.schema.freezed.dart';
part 'genre_schema.schema.g.dart';

/// Defines the table structure for Genre.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class GenreTable {
  const GenreTable._();

  /// The name of the database table for Genre entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "genres";

  /// Column: id
  /// This is the primary key column for the Genre table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: name
  /// Data type: `String`
  /// Key: `name`
  static const String name = "name";
}

/// Represents the unique identifier for a Genre.
/// This class wraps the `int` value, providing type safety and encapsulation.
class GenreId extends Identity<int> {
  const GenreId._(this.value);

  @override
  final int value;

  /// Creates an instance of GenreId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory GenreId.fromJson(dynamic value) {
    if (value is int) {
      return GenreId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of GenreId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of GenreId from a int value.
  factory GenreId.fromValue(int value) {
    return GenreId._(value);
  }

  /// Creates an instance of GenreId with a value of -1.
  /// This is used to represent an empty or invalid GenreId for placeholder or default values of form fields.
  /// WARNING: This is not a valid GenreId access it value through [value] or [call] will throw an error.
  factory GenreId.empty() => GenreId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseGenreSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IGenreModel {
  GenreId get id;
  String get name;
}

/// Base model class for GenreModel.
@freezed
class GenreModel with _$GenreModel implements BaseGenreSchema, IGenreModel {
  const GenreModel._();

  /// Constructor for GenreModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`genres`)
  ///
  /// Fields:
  /// - GenreId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(GenreModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory GenreModel({
    @JsonKey(name: GenreModel.idKey) required GenreId id,
    @JsonKey(name: GenreModel.nameKey) required String name,
  }) = _GenreModel;

  /// Creates an instance of GenreModel from a JSON map.
  factory GenreModel.fromJson(Map<String, dynamic> json) =>
      _$GenreModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableGenreModel;

  /// Table name: `genres`
  static const String tableName = "genres";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}

/// Represents the GenreLiteModel model. generated by kimapp_generator
@freezed
class GenreLiteModel with _$GenreLiteModel implements BaseGenreSchema {
  const GenreLiteModel._();

  /// Constructor for GenreLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `genres`
  ///
  /// Fields:
  /// - GenreId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(GenreLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory GenreLiteModel({
    @JsonKey(name: GenreLiteModel.idKey) required GenreId id,
    @JsonKey(name: GenreLiteModel.nameKey) required String name,
  }) = _GenreLiteModel;

  /// Creates an instance of GenreLiteModel from a JSON map.
  factory GenreLiteModel.fromJson(Map<String, dynamic> json) =>
      _$GenreLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableGenreLiteModel;

  /// Table name: `genres`
  static const String tableName = "genres";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}

/// Represents the GenreDetailModel model. generated by kimapp_generator
@freezed
class GenreDetailModel
    with _$GenreDetailModel
    implements BaseGenreSchema, IGenreModel {
  const GenreDetailModel._();

  /// Constructor for GenreDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `genres`
  ///
  /// Fields:
  /// - GenreId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(GenreDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory GenreDetailModel({
    @JsonKey(name: GenreDetailModel.idKey) required GenreId id,
    @JsonKey(name: GenreDetailModel.nameKey) required String name,
  }) = _GenreDetailModel;

  /// Creates an instance of GenreDetailModel from a JSON map.
  factory GenreDetailModel.fromJson(Map<String, dynamic> json) =>
      _$GenreDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableGenreDetailModel;

  /// Table name: `genres`
  static const String tableName = "genres";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Converts this model to a base model.
  GenreModel toGenreModel() {
    return GenreModel(
      id: id,
      name: name,
    );
  }
}

/// Represents the GenreCreateParam model. generated by kimapp_generator
@freezed
class GenreCreateParam with _$GenreCreateParam implements BaseGenreSchema {
  const GenreCreateParam._();

  /// Constructor for GenreCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - String name : JsonKey('name')
  @JsonSerializable(explicitToJson: true)
  const factory GenreCreateParam({
    @JsonKey(name: GenreCreateParam.nameKey) required String name,
  }) = _GenreCreateParam;

  /// Creates an instance of GenreCreateParam from a JSON map.
  factory GenreCreateParam.fromJson(Map<String, dynamic> json) =>
      _$GenreCreateParamFromJson(json);

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}

/// Represents the GenreUpdateParam model. generated by kimapp_generator
@freezed
class GenreUpdateParam with _$GenreUpdateParam implements BaseGenreSchema {
  const GenreUpdateParam._();

  /// Constructor for GenreUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - String? name : JsonKey('name')
  @JsonSerializable(explicitToJson: true)
  const factory GenreUpdateParam({
    @JsonKey(name: GenreUpdateParam.nameKey) required String? name,
  }) = _GenreUpdateParam;

  /// Creates an instance of GenreUpdateParam from a JSON map.
  factory GenreUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$GenreUpdateParamFromJson(json);

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}
