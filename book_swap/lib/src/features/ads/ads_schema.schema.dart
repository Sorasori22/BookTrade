// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/core/storage/image_object.dart';
import 'ads_schema.dart';

part 'ads_schema.schema.freezed.dart';
part 'ads_schema.schema.g.dart';

/// Defines the table structure for Ads.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class AdsTable {
  const AdsTable._();

  /// The name of the database table for Ads entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "ads";

  /// Column: id
  /// This is the primary key column for the Ads table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: title
  /// Data type: `String`
  /// Key: `title`
  static const String title = "title";

  /// Column: description
  /// Data type: `String`
  /// Key: `description`
  static const String description = "description";

  /// Column: url
  /// Data type: `String`
  /// Key: `url`
  static const String url = "url";

  /// Column: image_path
  /// Data type: `ImageObject`
  /// Key: `image_path`
  static const String imagePath = "image_path";

  /// Column: button_text
  /// Data type: `String`
  /// Key: `button_text`
  static const String buttonText = "button_text";

  /// Column: active
  /// Data type: `bool`
  /// Key: `active`
  static const String active = "active";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";
}

/// Represents the unique identifier for a Ads.
/// This class wraps the `int` value, providing type safety and encapsulation.
class AdsId extends Identity<int> {
  const AdsId._(this.value);

  @override
  final int value;

  /// Creates an instance of AdsId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory AdsId.fromJson(dynamic value) {
    if (value is int) {
      return AdsId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of AdsId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of AdsId from a int value.
  factory AdsId.fromValue(int value) {
    return AdsId._(value);
  }

  /// Creates an instance of AdsId with a value of -1.
  /// This is used to represent an empty or invalid AdsId for placeholder or default values of form fields.
  /// WARNING: This is not a valid AdsId access it value through [value] or [call] will throw an error.
  factory AdsId.empty() => AdsId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseAdsSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IAdsModel {
  AdsId get id;
  String get title;
  String get description;
  String get url;
  ImageObject get imagePath;
  String get buttonText;
  bool get active;
  DateTime get createdAt;
}

/// Base model class for AdsModel.
@freezed
sealed class AdsModel with _$AdsModel implements BaseAdsSchema, IAdsModel {
  const AdsModel._();

  /// Constructor for AdsModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`ads`)
  ///
  /// Fields:
  /// - AdsId id : JsonKey('id')
  /// - String title : JsonKey('title')
  /// - String description : JsonKey('description')
  /// - String url : JsonKey('url')
  /// - ImageObject imagePath : JsonKey('image_path')
  /// - String buttonText : JsonKey('button_text')
  /// - bool active : JsonKey('active')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(AdsModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory AdsModel({
    @JsonKey(name: AdsModel.idKey) required AdsId id,
    @JsonKey(name: AdsModel.titleKey) required String title,
    @JsonKey(name: AdsModel.descriptionKey) required String description,
    @JsonKey(name: AdsModel.urlKey) required String url,
    @JsonKey(name: AdsModel.imagePathKey) required ImageObject imagePath,
    @JsonKey(name: AdsModel.buttonTextKey) required String buttonText,
    @JsonKey(name: AdsModel.activeKey) required bool active,
    @JsonKey(name: AdsModel.createdAtKey) required DateTime createdAt,
  }) = _AdsModel;

  /// Creates an instance of AdsModel from a JSON map.
  factory AdsModel.fromJson(Map<String, dynamic> json) =>
      _$AdsModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableAdsModel;

  /// Table name: `ads`
  static const String tableName = "ads";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for url field with JsonKey('url')
  static const String urlKey = "url";

  /// Field name for imagePath field with JsonKey('image_path')
  static const String imagePathKey = "image_path";

  /// Field name for buttonText field with JsonKey('button_text')
  static const String buttonTextKey = "button_text";

  /// Field name for active field with JsonKey('active')
  static const String activeKey = "active";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";
}
