// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/features/book/book_schema.schema.dart';
import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'book_rating_schema.dart';

part 'book_rating_schema.schema.freezed.dart';
part 'book_rating_schema.schema.g.dart';

/// Defines the table structure for BookRating.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class BookRatingTable {
  const BookRatingTable._();

  /// The name of the database table for BookRating entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "book_ratings";

  /// Column: id
  /// This is the primary key column for the BookRating table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: user_id
  /// Data type: `ProfileId`
  /// Key: `user_id`
  static const String userId = "user_id";

  /// Column: book_id
  /// Data type: `BookId`
  /// Key: `book_id`
  static const String bookId = "book_id";

  /// Column: rating
  /// Data type: `int`
  /// Key: `rating`
  static const String rating = "rating";

  /// Column: comment
  /// Data type: `String?`
  /// Key: `comment`
  static const String comment = "comment";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: user_id
  /// This is a join key for field user.
  /// Data type: `ProfileLiteModel`
  /// Key: `user`
  static const String user = "user";

  /// Column: book_id
  /// This is a join key for field book.
  /// Data type: `BookLiteModel`
  /// Key: `book`
  static const String book = "book";
}

/// Represents the unique identifier for a BookRating.
/// This class wraps the `int` value, providing type safety and encapsulation.
class BookRatingId extends Identity<int> {
  const BookRatingId._(this.value);

  @override
  final int value;

  /// Creates an instance of BookRatingId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory BookRatingId.fromJson(dynamic value) {
    if (value is int) {
      return BookRatingId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of BookRatingId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of BookRatingId from a int value.
  factory BookRatingId.fromValue(int value) {
    return BookRatingId._(value);
  }

  /// Creates an instance of BookRatingId with a value of -1.
  /// This is used to represent an empty or invalid BookRatingId for placeholder or default values of form fields.
  /// WARNING: This is not a valid BookRatingId access it value through [value] or [call] will throw an error.
  factory BookRatingId.empty() => BookRatingId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseBookRatingSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IBookRatingModel {
  BookRatingId get id;
  ProfileId get userId;
  BookId get bookId;
  int get rating;
  String? get comment;
  DateTime get createdAt;
  ProfileLiteModel get user;
  BookLiteModel get book;
}

/// Base model class for BookRatingModel.
@freezed
class BookRatingModel
    with _$BookRatingModel
    implements BaseBookRatingSchema, IBookRatingModel {
  const BookRatingModel._();

  /// Constructor for BookRatingModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`book_ratings`)
  ///
  /// Fields:
  /// - BookRatingId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - BookId bookId : JsonKey('book_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  /// - BookLiteModel book : JsonKey('book')
  @TableModel(BookRatingModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookRatingModel({
    @JsonKey(name: BookRatingModel.idKey) required BookRatingId id,
    @JsonKey(name: BookRatingModel.userIdKey) required ProfileId userId,
    @JsonKey(name: BookRatingModel.bookIdKey) required BookId bookId,
    @JsonKey(name: BookRatingModel.ratingKey) required int rating,
    @JsonKey(name: BookRatingModel.commentKey) required String? comment,
    @JsonKey(name: BookRatingModel.createdAtKey) required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: BookRatingModel.userKey)
    required ProfileLiteModel user,
    @JoinedColumn(foreignKey: "book_id", candidateKey: "id")
    @JsonKey(name: BookRatingModel.bookKey)
    required BookLiteModel book,
  }) = _BookRatingModel;

  /// Creates an instance of BookRatingModel from a JSON map.
  factory BookRatingModel.fromJson(Map<String, dynamic> json) =>
      _$BookRatingModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookRatingModel;

  /// Table name: `book_ratings`
  static const String tableName = "book_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for bookId field with JsonKey('book_id')
  static const String bookIdKey = "book_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";

  /// Field name for book field with JsonKey('book')
  /// This is json key for joined field. with foreign key: book_id and candidate key: id
  static const String bookKey = "book";
}

/// Represents the BookRatingLiteModel model. generated by kimapp_generator
@freezed
class BookRatingLiteModel
    with _$BookRatingLiteModel
    implements BaseBookRatingSchema {
  const BookRatingLiteModel._();

  /// Constructor for BookRatingLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `book_ratings`
  ///
  /// Fields:
  /// - BookRatingId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - BookId bookId : JsonKey('book_id')
  /// - int rating : JsonKey('rating')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(BookRatingLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookRatingLiteModel({
    @JsonKey(name: BookRatingLiteModel.idKey) required BookRatingId id,
    @JsonKey(name: BookRatingLiteModel.userIdKey) required ProfileId userId,
    @JsonKey(name: BookRatingLiteModel.bookIdKey) required BookId bookId,
    @JsonKey(name: BookRatingLiteModel.ratingKey) required int rating,
    @JsonKey(name: BookRatingLiteModel.createdAtKey)
    required DateTime createdAt,
  }) = _BookRatingLiteModel;

  /// Creates an instance of BookRatingLiteModel from a JSON map.
  factory BookRatingLiteModel.fromJson(Map<String, dynamic> json) =>
      _$BookRatingLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookRatingLiteModel;

  /// Table name: `book_ratings`
  static const String tableName = "book_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for bookId field with JsonKey('book_id')
  static const String bookIdKey = "book_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";
}

/// Represents the BookRatingDetailModel model. generated by kimapp_generator
@freezed
class BookRatingDetailModel
    with _$BookRatingDetailModel
    implements BaseBookRatingSchema, IBookRatingModel {
  const BookRatingDetailModel._();

  /// Constructor for BookRatingDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `book_ratings`
  ///
  /// Fields:
  /// - BookRatingId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - BookId bookId : JsonKey('book_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  /// - BookLiteModel book : JsonKey('book')
  @TableModel(BookRatingDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookRatingDetailModel({
    @JsonKey(name: BookRatingDetailModel.idKey) required BookRatingId id,
    @JsonKey(name: BookRatingDetailModel.userIdKey) required ProfileId userId,
    @JsonKey(name: BookRatingDetailModel.bookIdKey) required BookId bookId,
    @JsonKey(name: BookRatingDetailModel.ratingKey) required int rating,
    @JsonKey(name: BookRatingDetailModel.commentKey) required String? comment,
    @JsonKey(name: BookRatingDetailModel.createdAtKey)
    required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: BookRatingDetailModel.userKey)
    required ProfileLiteModel user,
    @JoinedColumn(foreignKey: "book_id", candidateKey: "id")
    @JsonKey(name: BookRatingDetailModel.bookKey)
    required BookLiteModel book,
  }) = _BookRatingDetailModel;

  /// Creates an instance of BookRatingDetailModel from a JSON map.
  factory BookRatingDetailModel.fromJson(Map<String, dynamic> json) =>
      _$BookRatingDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookRatingDetailModel;

  /// Table name: `book_ratings`
  static const String tableName = "book_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for bookId field with JsonKey('book_id')
  static const String bookIdKey = "book_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";

  /// Field name for book field with JsonKey('book')
  /// This is json key for joined field. with foreign key: book_id and candidate key: id
  static const String bookKey = "book";

  /// Converts this model to a base model.
  BookRatingModel toBookRatingModel() {
    return BookRatingModel(
      id: id,
      userId: userId,
      bookId: bookId,
      rating: rating,
      comment: comment,
      createdAt: createdAt,
      user: user,
      book: book,
    );
  }
}

/// Represents the BookRatingCreateParam model. generated by kimapp_generator
@freezed
class BookRatingCreateParam
    with _$BookRatingCreateParam
    implements BaseBookRatingSchema {
  const BookRatingCreateParam._();

  /// Constructor for BookRatingCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId userId : JsonKey('user_id')
  /// - BookId bookId : JsonKey('book_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  @JsonSerializable(explicitToJson: true)
  const factory BookRatingCreateParam({
    @JsonKey(name: BookRatingCreateParam.userIdKey) required ProfileId userId,
    @JsonKey(name: BookRatingCreateParam.bookIdKey) required BookId bookId,
    @JsonKey(name: BookRatingCreateParam.ratingKey) required int rating,
    @JsonKey(name: BookRatingCreateParam.commentKey) required String? comment,
  }) = _BookRatingCreateParam;

  /// Creates an instance of BookRatingCreateParam from a JSON map.
  factory BookRatingCreateParam.fromJson(Map<String, dynamic> json) =>
      _$BookRatingCreateParamFromJson(json);

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for bookId field with JsonKey('book_id')
  static const String bookIdKey = "book_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";
}

/// Represents the BookRatingUpdateParam model. generated by kimapp_generator
@freezed
class BookRatingUpdateParam
    with _$BookRatingUpdateParam
    implements BaseBookRatingSchema {
  const BookRatingUpdateParam._();

  /// Constructor for BookRatingUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - int? rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  @JsonSerializable(explicitToJson: true)
  const factory BookRatingUpdateParam({
    @JsonKey(name: BookRatingUpdateParam.ratingKey) required int? rating,
    @JsonKey(name: BookRatingUpdateParam.commentKey) required String? comment,
  }) = _BookRatingUpdateParam;

  /// Creates an instance of BookRatingUpdateParam from a JSON map.
  factory BookRatingUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$BookRatingUpdateParamFromJson(json);

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";
}
