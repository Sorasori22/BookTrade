// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'user_schema.dart';

part 'user_schema.schema.freezed.dart';
part 'user_schema.schema.g.dart';

/// Defines the table structure for User.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class UserTable {
  const UserTable._();

  /// The name of the database table for User entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "users";

  /// Column: id
  /// This is the primary key column for the User table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: name
  /// Data type: `String`
  /// Key: `name`
  static const String name = "name";
}

/// Represents the unique identifier for a User.
/// This class wraps the `int` value, providing type safety and encapsulation.
class UserId extends Identity<int> {
  const UserId._(this.value);

  @override
  final int value;

  /// Creates an instance of UserId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory UserId.fromJson(dynamic value) {
    if (value is int) {
      return UserId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of UserId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of UserId from a int value.
  factory UserId.fromValue(int value) {
    return UserId._(value);
  }
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseUserSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IUserModel {
  UserId get id;
  String get name;
}

/// Base model class for UserModel.
@freezed
class UserModel with _$UserModel implements BaseUserSchema, IUserModel {
  const UserModel._();

  /// Constructor for UserModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`users`)
  ///
  /// Fields:
  /// - UserId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(UserModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserModel({
    @JsonKey(name: UserModel.idKey) required UserId id,
    @JsonKey(name: UserModel.nameKey) required String name,
  }) = _UserModel;

  /// Creates an instance of UserModel from a JSON map.
  factory UserModel.fromJson(Map<String, dynamic> json) =>
      _$UserModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserModel;

  /// Table name: `users`
  static const String tableName = "users";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}

/// Represents the UserLiteModel model. generated by kimapp_generator
@freezed
class UserLiteModel with _$UserLiteModel implements BaseUserSchema {
  const UserLiteModel._();

  /// Constructor for UserLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `users`
  ///
  /// Fields:
  /// - UserId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(UserLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserLiteModel({
    @JsonKey(name: UserLiteModel.idKey) required UserId id,
    @JsonKey(name: UserLiteModel.nameKey) required String name,
  }) = _UserLiteModel;

  /// Creates an instance of UserLiteModel from a JSON map.
  factory UserLiteModel.fromJson(Map<String, dynamic> json) =>
      _$UserLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserLiteModel;

  /// Table name: `users`
  static const String tableName = "users";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}

/// Represents the UserDetailModel model. generated by kimapp_generator
@freezed
class UserDetailModel
    with _$UserDetailModel
    implements BaseUserSchema, IUserModel {
  const UserDetailModel._();

  /// Constructor for UserDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `users`
  ///
  /// Fields:
  /// - UserId id : JsonKey('id')
  /// - String name : JsonKey('name')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(UserDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserDetailModel({
    @JsonKey(name: UserDetailModel.idKey) required UserId id,
    @JsonKey(name: UserDetailModel.nameKey) required String name,
    @JsonKey(name: UserDetailModel.createdAtKey) required DateTime createdAt,
  }) = _UserDetailModel;

  /// Creates an instance of UserDetailModel from a JSON map.
  factory UserDetailModel.fromJson(Map<String, dynamic> json) =>
      _$UserDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserDetailModel;

  /// Table name: `users`
  static const String tableName = "users";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Converts this model to a base model.
  UserModel toUserModel() {
    return UserModel(
      id: id,
      name: name,
    );
  }
}

/// Represents the UserCreateParam model. generated by kimapp_generator
@freezed
class UserCreateParam with _$UserCreateParam implements BaseUserSchema {
  const UserCreateParam._();

  /// Constructor for UserCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  @JsonSerializable(explicitToJson: true)
  const factory UserCreateParam() = _UserCreateParam;

  /// Creates an instance of UserCreateParam from a JSON map.
  factory UserCreateParam.fromJson(Map<String, dynamic> json) =>
      _$UserCreateParamFromJson(json);
}

/// Represents the UserUpdateParam model. generated by kimapp_generator
@freezed
class UserUpdateParam with _$UserUpdateParam implements BaseUserSchema {
  const UserUpdateParam._();

  /// Constructor for UserUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  @JsonSerializable(explicitToJson: true)
  const factory UserUpdateParam() = _UserUpdateParam;

  /// Creates an instance of UserUpdateParam from a JSON map.
  factory UserUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$UserUpdateParamFromJson(json);
}
