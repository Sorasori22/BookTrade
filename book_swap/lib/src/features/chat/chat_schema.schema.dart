// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/core/storage/image_object.dart';
import 'package:book_swap/src/features/message/message_schema.schema.dart';
import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'chat_schema.dart';

part 'chat_schema.schema.freezed.dart';
part 'chat_schema.schema.g.dart';

/// Defines the table structure for Chat.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class ChatTable {
  const ChatTable._();

  /// The name of the database table for Chat entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "chats";

  /// Column: message_id
  /// Data type: `MessageId`
  /// Key: `message_id`
  static const String messageId = "message_id";

  /// Column: recipient_id
  /// Data type: `ProfileId`
  /// Key: `recipient_id`
  static const String recipientId = "recipient_id";

  /// Column: recipient_name
  /// Data type: `String`
  /// Key: `recipient_name`
  static const String recipientName = "recipient_name";

  /// Column: recipient_avatar_path
  /// Data type: `ImageObject?`
  /// Key: `recipient_avatar_path`
  static const String recipientAvatarPath = "recipient_avatar_path";

  /// Column: last_message
  /// Data type: `String`
  /// Key: `last_message`
  static const String lastMessage = "last_message";

  /// Column: last_message_time
  /// Data type: `DateTime`
  /// Key: `last_message_time`
  static const String lastMessageTime = "last_message_time";

  /// Column: unread_count
  /// Data type: `int`
  /// Key: `unread_count`
  static const String unreadCount = "unread_count";

  /// Column: is_sender
  /// Data type: `bool`
  /// Key: `is_sender`
  static const String isSender = "is_sender";
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseChatSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IChatModel {
  MessageId get messageId;
  ProfileId get recipientId;
  String get recipientName;
  ImageObject? get recipientAvatarPath;
  String get lastMessage;
  DateTime get lastMessageTime;
  int get unreadCount;
  bool get isSender;
}

/// Base model class for ChatModel.
@freezed
sealed class ChatModel with _$ChatModel implements BaseChatSchema, IChatModel {
  const ChatModel._();

  /// Constructor for ChatModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`chats`)
  ///
  /// Fields:
  /// - MessageId messageId : JsonKey('message_id')
  /// - ProfileId recipientId : JsonKey('recipient_id')
  /// - String recipientName : JsonKey('recipient_name')
  /// - ImageObject? recipientAvatarPath : JsonKey('recipient_avatar_path')
  /// - String lastMessage : JsonKey('last_message')
  /// - DateTime lastMessageTime : JsonKey('last_message_time')
  /// - int unreadCount : JsonKey('unread_count')
  /// - bool isSender : JsonKey('is_sender')
  @TableModel(ChatModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory ChatModel({
    @JsonKey(name: ChatModel.messageIdKey) required MessageId messageId,
    @JsonKey(name: ChatModel.recipientIdKey) required ProfileId recipientId,
    @JsonKey(name: ChatModel.recipientNameKey) required String recipientName,
    @JsonKey(name: ChatModel.recipientAvatarPathKey)
    required ImageObject? recipientAvatarPath,
    @JsonKey(name: ChatModel.lastMessageKey) required String lastMessage,
    @JsonKey(name: ChatModel.lastMessageTimeKey)
    required DateTime lastMessageTime,
    @JsonKey(name: ChatModel.unreadCountKey) required int unreadCount,
    @JsonKey(name: ChatModel.isSenderKey) required bool isSender,
  }) = _ChatModel;

  /// Creates an instance of ChatModel from a JSON map.
  factory ChatModel.fromJson(Map<String, dynamic> json) =>
      _$ChatModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableChatModel;

  /// Table name: `chats`
  static const String tableName = "chats";

  /// Field name for messageId field with JsonKey('message_id')
  static const String messageIdKey = "message_id";

  /// Field name for recipientId field with JsonKey('recipient_id')
  static const String recipientIdKey = "recipient_id";

  /// Field name for recipientName field with JsonKey('recipient_name')
  static const String recipientNameKey = "recipient_name";

  /// Field name for recipientAvatarPath field with JsonKey('recipient_avatar_path')
  static const String recipientAvatarPathKey = "recipient_avatar_path";

  /// Field name for lastMessage field with JsonKey('last_message')
  static const String lastMessageKey = "last_message";

  /// Field name for lastMessageTime field with JsonKey('last_message_time')
  static const String lastMessageTimeKey = "last_message_time";

  /// Field name for unreadCount field with JsonKey('unread_count')
  static const String unreadCountKey = "unread_count";

  /// Field name for isSender field with JsonKey('is_sender')
  static const String isSenderKey = "is_sender";
}
