// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'user_rating_schema.dart';

part 'user_rating_schema.schema.freezed.dart';
part 'user_rating_schema.schema.g.dart';

/// Defines the table structure for UserRating.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class UserRatingTable {
  const UserRatingTable._();

  /// The name of the database table for UserRating entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "user_ratings";

  /// Column: id
  /// This is the primary key column for the UserRating table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: rater_id
  /// Data type: `ProfileId`
  /// Key: `rater_id`
  static const String raterId = "rater_id";

  /// Column: rated_user_id
  /// Data type: `ProfileId`
  /// Key: `rated_user_id`
  static const String ratedUserId = "rated_user_id";

  /// Column: trade_request_id
  /// Data type: `int?`
  /// Key: `trade_request_id`
  static const String tradeRequestId = "trade_request_id";

  /// Column: rating
  /// Data type: `int`
  /// Key: `rating`
  static const String rating = "rating";

  /// Column: comment
  /// Data type: `String?`
  /// Key: `comment`
  static const String comment = "comment";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: rater_id
  /// This is a join key for field rater.
  /// Data type: `ProfileLiteModel`
  /// Key: `rater`
  static const String rater = "rater";

  /// Column: rated_user_id
  /// This is a join key for field ratedUser.
  /// Data type: `ProfileLiteModel`
  /// Key: `ratedUser`
  static const String ratedUser = "ratedUser";
}

/// Represents the unique identifier for a UserRating.
/// This class wraps the `int` value, providing type safety and encapsulation.
class UserRatingId extends Identity<int> {
  const UserRatingId._(this.value);

  @override
  final int value;

  /// Creates an instance of UserRatingId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory UserRatingId.fromJson(dynamic value) {
    if (value is int) {
      return UserRatingId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of UserRatingId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of UserRatingId from a int value.
  factory UserRatingId.fromValue(int value) {
    return UserRatingId._(value);
  }
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseUserRatingSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IUserRatingModel {
  UserRatingId get id;
  ProfileId get raterId;
  ProfileId get ratedUserId;
  int? get tradeRequestId;
  int get rating;
  String? get comment;
  DateTime get createdAt;
  ProfileLiteModel get rater;
  ProfileLiteModel get ratedUser;
}

/// Base model class for UserRatingModel.
@freezed
class UserRatingModel
    with _$UserRatingModel
    implements BaseUserRatingSchema, IUserRatingModel {
  const UserRatingModel._();

  /// Constructor for UserRatingModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`user_ratings`)
  ///
  /// Fields:
  /// - UserRatingId id : JsonKey('id')
  /// - ProfileId raterId : JsonKey('rater_id')
  /// - ProfileId ratedUserId : JsonKey('rated_user_id')
  /// - int? tradeRequestId : JsonKey('trade_request_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel rater : JsonKey('rater')
  /// - ProfileLiteModel ratedUser : JsonKey('ratedUser')
  @TableModel(UserRatingModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserRatingModel({
    @JsonKey(name: UserRatingModel.idKey) required UserRatingId id,
    @JsonKey(name: UserRatingModel.raterIdKey) required ProfileId raterId,
    @JsonKey(name: UserRatingModel.ratedUserIdKey)
    required ProfileId ratedUserId,
    @JsonKey(name: UserRatingModel.tradeRequestIdKey)
    required int? tradeRequestId,
    @JsonKey(name: UserRatingModel.ratingKey) required int rating,
    @JsonKey(name: UserRatingModel.commentKey) required String? comment,
    @JsonKey(name: UserRatingModel.createdAtKey) required DateTime createdAt,
    @JoinedColumn(foreignKey: "rater_id", candidateKey: "id")
    @JsonKey(name: UserRatingModel.raterKey)
    required ProfileLiteModel rater,
    @JoinedColumn(foreignKey: "rated_user_id", candidateKey: "id")
    @JsonKey(name: UserRatingModel.ratedUserKey)
    required ProfileLiteModel ratedUser,
  }) = _UserRatingModel;

  /// Creates an instance of UserRatingModel from a JSON map.
  factory UserRatingModel.fromJson(Map<String, dynamic> json) =>
      _$UserRatingModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserRatingModel;

  /// Table name: `user_ratings`
  static const String tableName = "user_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for raterId field with JsonKey('rater_id')
  static const String raterIdKey = "rater_id";

  /// Field name for ratedUserId field with JsonKey('rated_user_id')
  static const String ratedUserIdKey = "rated_user_id";

  /// Field name for tradeRequestId field with JsonKey('trade_request_id')
  static const String tradeRequestIdKey = "trade_request_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for rater field with JsonKey('rater')
  /// This is json key for joined field. with foreign key: rater_id and candidate key: id
  static const String raterKey = "rater";

  /// Field name for ratedUser field with JsonKey('ratedUser')
  /// This is json key for joined field. with foreign key: rated_user_id and candidate key: id
  static const String ratedUserKey = "ratedUser";
}

/// Represents the UserRatingLiteModel model. generated by kimapp_generator
@freezed
class UserRatingLiteModel
    with _$UserRatingLiteModel
    implements BaseUserRatingSchema {
  const UserRatingLiteModel._();

  /// Constructor for UserRatingLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `user_ratings`
  ///
  /// Fields:
  /// - UserRatingId id : JsonKey('id')
  /// - ProfileId raterId : JsonKey('rater_id')
  /// - ProfileId ratedUserId : JsonKey('rated_user_id')
  /// - int rating : JsonKey('rating')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(UserRatingLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserRatingLiteModel({
    @JsonKey(name: UserRatingLiteModel.idKey) required UserRatingId id,
    @JsonKey(name: UserRatingLiteModel.raterIdKey) required ProfileId raterId,
    @JsonKey(name: UserRatingLiteModel.ratedUserIdKey)
    required ProfileId ratedUserId,
    @JsonKey(name: UserRatingLiteModel.ratingKey) required int rating,
    @JsonKey(name: UserRatingLiteModel.createdAtKey)
    required DateTime createdAt,
  }) = _UserRatingLiteModel;

  /// Creates an instance of UserRatingLiteModel from a JSON map.
  factory UserRatingLiteModel.fromJson(Map<String, dynamic> json) =>
      _$UserRatingLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserRatingLiteModel;

  /// Table name: `user_ratings`
  static const String tableName = "user_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for raterId field with JsonKey('rater_id')
  static const String raterIdKey = "rater_id";

  /// Field name for ratedUserId field with JsonKey('rated_user_id')
  static const String ratedUserIdKey = "rated_user_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";
}

/// Represents the UserRatingDetailModel model. generated by kimapp_generator
@freezed
class UserRatingDetailModel
    with _$UserRatingDetailModel
    implements BaseUserRatingSchema, IUserRatingModel {
  const UserRatingDetailModel._();

  /// Constructor for UserRatingDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `user_ratings`
  ///
  /// Fields:
  /// - UserRatingId id : JsonKey('id')
  /// - ProfileId raterId : JsonKey('rater_id')
  /// - ProfileId ratedUserId : JsonKey('rated_user_id')
  /// - int? tradeRequestId : JsonKey('trade_request_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel rater : JsonKey('rater')
  /// - ProfileLiteModel ratedUser : JsonKey('ratedUser')
  @TableModel(UserRatingDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory UserRatingDetailModel({
    @JsonKey(name: UserRatingDetailModel.idKey) required UserRatingId id,
    @JsonKey(name: UserRatingDetailModel.raterIdKey) required ProfileId raterId,
    @JsonKey(name: UserRatingDetailModel.ratedUserIdKey)
    required ProfileId ratedUserId,
    @JsonKey(name: UserRatingDetailModel.tradeRequestIdKey)
    required int? tradeRequestId,
    @JsonKey(name: UserRatingDetailModel.ratingKey) required int rating,
    @JsonKey(name: UserRatingDetailModel.commentKey) required String? comment,
    @JsonKey(name: UserRatingDetailModel.createdAtKey)
    required DateTime createdAt,
    @JoinedColumn(foreignKey: "rater_id", candidateKey: "id")
    @JsonKey(name: UserRatingDetailModel.raterKey)
    required ProfileLiteModel rater,
    @JoinedColumn(foreignKey: "rated_user_id", candidateKey: "id")
    @JsonKey(name: UserRatingDetailModel.ratedUserKey)
    required ProfileLiteModel ratedUser,
  }) = _UserRatingDetailModel;

  /// Creates an instance of UserRatingDetailModel from a JSON map.
  factory UserRatingDetailModel.fromJson(Map<String, dynamic> json) =>
      _$UserRatingDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableUserRatingDetailModel;

  /// Table name: `user_ratings`
  static const String tableName = "user_ratings";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for raterId field with JsonKey('rater_id')
  static const String raterIdKey = "rater_id";

  /// Field name for ratedUserId field with JsonKey('rated_user_id')
  static const String ratedUserIdKey = "rated_user_id";

  /// Field name for tradeRequestId field with JsonKey('trade_request_id')
  static const String tradeRequestIdKey = "trade_request_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for rater field with JsonKey('rater')
  /// This is json key for joined field. with foreign key: rater_id and candidate key: id
  static const String raterKey = "rater";

  /// Field name for ratedUser field with JsonKey('ratedUser')
  /// This is json key for joined field. with foreign key: rated_user_id and candidate key: id
  static const String ratedUserKey = "ratedUser";

  /// Converts this model to a base model.
  UserRatingModel toUserRatingModel() {
    return UserRatingModel(
      id: id,
      raterId: raterId,
      ratedUserId: ratedUserId,
      tradeRequestId: tradeRequestId,
      rating: rating,
      comment: comment,
      createdAt: createdAt,
      rater: rater,
      ratedUser: ratedUser,
    );
  }
}

/// Represents the UserRatingCreateParam model. generated by kimapp_generator
@freezed
class UserRatingCreateParam
    with _$UserRatingCreateParam
    implements BaseUserRatingSchema {
  const UserRatingCreateParam._();

  /// Constructor for UserRatingCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId raterId : JsonKey('rater_id')
  /// - ProfileId ratedUserId : JsonKey('rated_user_id')
  /// - int? tradeRequestId : JsonKey('trade_request_id')
  /// - int rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  @JsonSerializable(explicitToJson: true)
  const factory UserRatingCreateParam({
    @JsonKey(name: UserRatingCreateParam.raterIdKey) required ProfileId raterId,
    @JsonKey(name: UserRatingCreateParam.ratedUserIdKey)
    required ProfileId ratedUserId,
    @JsonKey(name: UserRatingCreateParam.tradeRequestIdKey)
    required int? tradeRequestId,
    @JsonKey(name: UserRatingCreateParam.ratingKey) required int rating,
    @JsonKey(name: UserRatingCreateParam.commentKey) required String? comment,
  }) = _UserRatingCreateParam;

  /// Creates an instance of UserRatingCreateParam from a JSON map.
  factory UserRatingCreateParam.fromJson(Map<String, dynamic> json) =>
      _$UserRatingCreateParamFromJson(json);

  /// Field name for raterId field with JsonKey('rater_id')
  static const String raterIdKey = "rater_id";

  /// Field name for ratedUserId field with JsonKey('rated_user_id')
  static const String ratedUserIdKey = "rated_user_id";

  /// Field name for tradeRequestId field with JsonKey('trade_request_id')
  static const String tradeRequestIdKey = "trade_request_id";

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";
}

/// Represents the UserRatingUpdateParam model. generated by kimapp_generator
@freezed
class UserRatingUpdateParam
    with _$UserRatingUpdateParam
    implements BaseUserRatingSchema {
  const UserRatingUpdateParam._();

  /// Constructor for UserRatingUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - int? rating : JsonKey('rating')
  /// - String? comment : JsonKey('comment')
  @JsonSerializable(explicitToJson: true)
  const factory UserRatingUpdateParam({
    @JsonKey(name: UserRatingUpdateParam.ratingKey) required int? rating,
    @JsonKey(name: UserRatingUpdateParam.commentKey) required String? comment,
  }) = _UserRatingUpdateParam;

  /// Creates an instance of UserRatingUpdateParam from a JSON map.
  factory UserRatingUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$UserRatingUpdateParamFromJson(json);

  /// Field name for rating field with JsonKey('rating')
  static const String ratingKey = "rating";

  /// Field name for comment field with JsonKey('comment')
  static const String commentKey = "comment";
}
