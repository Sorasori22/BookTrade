// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'wishlist_item_schema.dart';

part 'wishlist_item_schema.schema.freezed.dart';
part 'wishlist_item_schema.schema.g.dart';

/// Defines the table structure for WishlistItem.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class WishlistItemTable {
  const WishlistItemTable._();

  /// The name of the database table for WishlistItem entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "wishlist_items";

  /// Column: id
  /// This is the primary key column for the WishlistItem table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: user_id
  /// Data type: `ProfileId`
  /// Key: `user_id`
  static const String userId = "user_id";

  /// Column: title
  /// Data type: `String`
  /// Key: `title`
  static const String title = "title";

  /// Column: author
  /// Data type: `String?`
  /// Key: `author`
  static const String author = "author";

  /// Column: isbn
  /// Data type: `String?`
  /// Key: `isbn`
  static const String isbn = "isbn";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: user_id
  /// This is a join key for field user.
  /// Data type: `ProfileLiteModel`
  /// Key: `user`
  static const String user = "user";
}

/// Represents the unique identifier for a WishlistItem.
/// This class wraps the `int` value, providing type safety and encapsulation.
class WishlistItemId extends Identity<int> {
  const WishlistItemId._(this.value);

  @override
  final int value;

  /// Creates an instance of WishlistItemId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory WishlistItemId.fromJson(dynamic value) {
    if (value is int) {
      return WishlistItemId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of WishlistItemId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of WishlistItemId from a int value.
  factory WishlistItemId.fromValue(int value) {
    return WishlistItemId._(value);
  }

  /// Creates an instance of WishlistItemId with a value of -1.
  /// This is used to represent an empty or invalid WishlistItemId for placeholder or default values of form fields.
  /// WARNING: This is not a valid WishlistItemId access it value through [value] or [call] will throw an error.
  factory WishlistItemId.empty() => WishlistItemId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseWishlistItemSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IWishlistItemModel {
  WishlistItemId get id;
  ProfileId get userId;
  String get title;
  String? get author;
  String? get isbn;
  DateTime get createdAt;
  ProfileLiteModel get user;
}

/// Base model class for WishlistItemModel.
@freezed
class WishlistItemModel
    with _$WishlistItemModel
    implements BaseWishlistItemSchema, IWishlistItemModel {
  const WishlistItemModel._();

  /// Constructor for WishlistItemModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`wishlist_items`)
  ///
  /// Fields:
  /// - WishlistItemId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String title : JsonKey('title')
  /// - String? author : JsonKey('author')
  /// - String? isbn : JsonKey('isbn')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  @TableModel(WishlistItemModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory WishlistItemModel({
    @JsonKey(name: WishlistItemModel.idKey) required WishlistItemId id,
    @JsonKey(name: WishlistItemModel.userIdKey) required ProfileId userId,
    @JsonKey(name: WishlistItemModel.titleKey) required String title,
    @JsonKey(name: WishlistItemModel.authorKey) required String? author,
    @JsonKey(name: WishlistItemModel.isbnKey) required String? isbn,
    @JsonKey(name: WishlistItemModel.createdAtKey) required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: WishlistItemModel.userKey)
    required ProfileLiteModel user,
  }) = _WishlistItemModel;

  /// Creates an instance of WishlistItemModel from a JSON map.
  factory WishlistItemModel.fromJson(Map<String, dynamic> json) =>
      _$WishlistItemModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableWishlistItemModel;

  /// Table name: `wishlist_items`
  static const String tableName = "wishlist_items";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for isbn field with JsonKey('isbn')
  static const String isbnKey = "isbn";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";
}

/// Represents the WishlistItemLiteModel model. generated by kimapp_generator
@freezed
class WishlistItemLiteModel
    with _$WishlistItemLiteModel
    implements BaseWishlistItemSchema {
  const WishlistItemLiteModel._();

  /// Constructor for WishlistItemLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `wishlist_items`
  ///
  /// Fields:
  /// - WishlistItemId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String title : JsonKey('title')
  /// - String? author : JsonKey('author')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(WishlistItemLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory WishlistItemLiteModel({
    @JsonKey(name: WishlistItemLiteModel.idKey) required WishlistItemId id,
    @JsonKey(name: WishlistItemLiteModel.userIdKey) required ProfileId userId,
    @JsonKey(name: WishlistItemLiteModel.titleKey) required String title,
    @JsonKey(name: WishlistItemLiteModel.authorKey) required String? author,
    @JsonKey(name: WishlistItemLiteModel.createdAtKey)
    required DateTime createdAt,
  }) = _WishlistItemLiteModel;

  /// Creates an instance of WishlistItemLiteModel from a JSON map.
  factory WishlistItemLiteModel.fromJson(Map<String, dynamic> json) =>
      _$WishlistItemLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableWishlistItemLiteModel;

  /// Table name: `wishlist_items`
  static const String tableName = "wishlist_items";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";
}

/// Represents the WishlistItemDetailModel model. generated by kimapp_generator
@freezed
class WishlistItemDetailModel
    with _$WishlistItemDetailModel
    implements BaseWishlistItemSchema, IWishlistItemModel {
  const WishlistItemDetailModel._();

  /// Constructor for WishlistItemDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `wishlist_items`
  ///
  /// Fields:
  /// - WishlistItemId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String title : JsonKey('title')
  /// - String? author : JsonKey('author')
  /// - String? isbn : JsonKey('isbn')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  @TableModel(WishlistItemDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory WishlistItemDetailModel({
    @JsonKey(name: WishlistItemDetailModel.idKey) required WishlistItemId id,
    @JsonKey(name: WishlistItemDetailModel.userIdKey) required ProfileId userId,
    @JsonKey(name: WishlistItemDetailModel.titleKey) required String title,
    @JsonKey(name: WishlistItemDetailModel.authorKey) required String? author,
    @JsonKey(name: WishlistItemDetailModel.isbnKey) required String? isbn,
    @JsonKey(name: WishlistItemDetailModel.createdAtKey)
    required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: WishlistItemDetailModel.userKey)
    required ProfileLiteModel user,
  }) = _WishlistItemDetailModel;

  /// Creates an instance of WishlistItemDetailModel from a JSON map.
  factory WishlistItemDetailModel.fromJson(Map<String, dynamic> json) =>
      _$WishlistItemDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableWishlistItemDetailModel;

  /// Table name: `wishlist_items`
  static const String tableName = "wishlist_items";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for isbn field with JsonKey('isbn')
  static const String isbnKey = "isbn";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";

  /// Converts this model to a base model.
  WishlistItemModel toWishlistItemModel() {
    return WishlistItemModel(
      id: id,
      userId: userId,
      title: title,
      author: author,
      isbn: isbn,
      createdAt: createdAt,
      user: user,
    );
  }
}

/// Represents the WishlistItemCreateParam model. generated by kimapp_generator
@freezed
class WishlistItemCreateParam
    with _$WishlistItemCreateParam
    implements BaseWishlistItemSchema {
  const WishlistItemCreateParam._();

  /// Constructor for WishlistItemCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId userId : JsonKey('user_id')
  /// - String title : JsonKey('title')
  /// - String? author : JsonKey('author')
  /// - String? isbn : JsonKey('isbn')
  @JsonSerializable(explicitToJson: true)
  const factory WishlistItemCreateParam({
    @JsonKey(name: WishlistItemCreateParam.userIdKey) required ProfileId userId,
    @JsonKey(name: WishlistItemCreateParam.titleKey) required String title,
    @JsonKey(name: WishlistItemCreateParam.authorKey) required String? author,
    @JsonKey(name: WishlistItemCreateParam.isbnKey) required String? isbn,
  }) = _WishlistItemCreateParam;

  /// Creates an instance of WishlistItemCreateParam from a JSON map.
  factory WishlistItemCreateParam.fromJson(Map<String, dynamic> json) =>
      _$WishlistItemCreateParamFromJson(json);

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for isbn field with JsonKey('isbn')
  static const String isbnKey = "isbn";
}

/// Represents the WishlistItemUpdateParam model. generated by kimapp_generator
@freezed
class WishlistItemUpdateParam
    with _$WishlistItemUpdateParam
    implements BaseWishlistItemSchema {
  const WishlistItemUpdateParam._();

  /// Constructor for WishlistItemUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - String? title : JsonKey('title')
  /// - String? author : JsonKey('author')
  /// - String? isbn : JsonKey('isbn')
  @JsonSerializable(explicitToJson: true)
  const factory WishlistItemUpdateParam({
    @JsonKey(name: WishlistItemUpdateParam.titleKey) required String? title,
    @JsonKey(name: WishlistItemUpdateParam.authorKey) required String? author,
    @JsonKey(name: WishlistItemUpdateParam.isbnKey) required String? isbn,
  }) = _WishlistItemUpdateParam;

  /// Creates an instance of WishlistItemUpdateParam from a JSON map.
  factory WishlistItemUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$WishlistItemUpdateParamFromJson(json);

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for isbn field with JsonKey('isbn')
  static const String isbnKey = "isbn";
}
