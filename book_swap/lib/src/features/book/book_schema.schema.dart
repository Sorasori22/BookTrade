// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/core/storage/image_object.dart';
import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'book_schema.dart';

part 'book_schema.schema.freezed.dart';
part 'book_schema.schema.g.dart';

/// Defines the table structure for Book.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class BookTable {
  const BookTable._();

  /// The name of the database table for Book entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "books";

  /// Column: id
  /// This is the primary key column for the Book table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: owner_id
  /// Data type: `ProfileId`
  /// Key: `owner_id`
  static const String ownerId = "owner_id";

  /// Column: title
  /// Data type: `String`
  /// Key: `title`
  static const String title = "title";

  /// Column: author
  /// Data type: `String`
  /// Key: `author`
  static const String author = "author";

  /// Column: condition
  /// Data type: `int`
  /// Key: `condition`
  static const String condition = "condition";

  /// Column: image_url
  /// Data type: `ImageObject?`
  /// Key: `image_url`
  static const String image = "image_url";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: updated_at
  /// Data type: `DateTime`
  /// Key: `updated_at`
  static const String updatedAt = "updated_at";
}

/// Represents the unique identifier for a Book.
/// This class wraps the `int` value, providing type safety and encapsulation.
class BookId extends Identity<int> {
  const BookId._(this.value);

  @override
  final int value;

  /// Creates an instance of BookId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory BookId.fromJson(dynamic value) {
    if (value is int) {
      return BookId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of BookId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of BookId from a int value.
  factory BookId.fromValue(int value) {
    return BookId._(value);
  }

  /// Creates an instance of BookId with a value of -1.
  /// This is used to represent an empty or invalid BookId for placeholder or default values of form fields.
  /// WARNING: This is not a valid BookId access it value through [value] or [call] will throw an error.
  factory BookId.empty() => BookId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseBookSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IBookModel {
  BookId get id;
  ProfileId get ownerId;
  String get title;
  String get author;
  int get condition;
  ImageObject? get image;
  DateTime get createdAt;
  DateTime get updatedAt;
}

/// Base model class for BookModel.
@freezed
class BookModel with _$BookModel implements BaseBookSchema, IBookModel {
  const BookModel._();

  /// Constructor for BookModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`books`)
  ///
  /// Fields:
  /// - BookId id : JsonKey('id')
  /// - ProfileId ownerId : JsonKey('owner_id')
  /// - String title : JsonKey('title')
  /// - String author : JsonKey('author')
  /// - int condition : JsonKey('condition')
  /// - ImageObject? image : JsonKey('image_url')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - DateTime updatedAt : JsonKey('updated_at')
  @TableModel(BookModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookModel({
    @JsonKey(name: BookModel.idKey) required BookId id,
    @JsonKey(name: BookModel.ownerIdKey) required ProfileId ownerId,
    @JsonKey(name: BookModel.titleKey) required String title,
    @JsonKey(name: BookModel.authorKey) required String author,
    @JsonKey(name: BookModel.conditionKey) required int condition,
    @JsonKey(name: BookModel.imageKey) required ImageObject? image,
    @JsonKey(name: BookModel.createdAtKey) required DateTime createdAt,
    @JsonKey(name: BookModel.updatedAtKey) required DateTime updatedAt,
  }) = _BookModel;

  /// Creates an instance of BookModel from a JSON map.
  factory BookModel.fromJson(Map<String, dynamic> json) =>
      _$BookModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookModel;

  /// Table name: `books`
  static const String tableName = "books";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for ownerId field with JsonKey('owner_id')
  static const String ownerIdKey = "owner_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for condition field with JsonKey('condition')
  static const String conditionKey = "condition";

  /// Field name for image field with JsonKey('image_url')
  static const String imageKey = "image_url";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for updatedAt field with JsonKey('updated_at')
  static const String updatedAtKey = "updated_at";
}

/// Represents the BookLiteModel model. generated by kimapp_generator
@freezed
class BookLiteModel with _$BookLiteModel implements BaseBookSchema {
  const BookLiteModel._();

  /// Constructor for BookLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `books`
  ///
  /// Fields:
  /// - BookId id : JsonKey('id')
  /// - String title : JsonKey('title')
  /// - String author : JsonKey('author')
  /// - ImageObject? image : JsonKey('image_url')
  /// - ProfileId ownerId : JsonKey('owner_id')
  @TableModel(BookLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookLiteModel({
    @JsonKey(name: BookLiteModel.idKey) required BookId id,
    @JsonKey(name: BookLiteModel.titleKey) required String title,
    @JsonKey(name: BookLiteModel.authorKey) required String author,
    @JsonKey(name: BookLiteModel.imageKey) required ImageObject? image,
    @JsonKey(name: BookLiteModel.ownerIdKey) required ProfileId ownerId,
  }) = _BookLiteModel;

  /// Creates an instance of BookLiteModel from a JSON map.
  factory BookLiteModel.fromJson(Map<String, dynamic> json) =>
      _$BookLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookLiteModel;

  /// Table name: `books`
  static const String tableName = "books";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for image field with JsonKey('image_url')
  static const String imageKey = "image_url";

  /// Field name for ownerId field with JsonKey('owner_id')
  static const String ownerIdKey = "owner_id";
}

/// Represents the BookDetailModel model. generated by kimapp_generator
@freezed
class BookDetailModel
    with _$BookDetailModel
    implements BaseBookSchema, IBookModel {
  const BookDetailModel._();

  /// Constructor for BookDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `books`
  ///
  /// Fields:
  /// - BookId id : JsonKey('id')
  /// - ProfileId ownerId : JsonKey('owner_id')
  /// - String title : JsonKey('title')
  /// - String author : JsonKey('author')
  /// - int condition : JsonKey('condition')
  /// - ImageObject? image : JsonKey('image_url')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - DateTime updatedAt : JsonKey('updated_at')
  /// - ProfileLiteModel? owner : JsonKey('owner')
  /// - String? description : JsonKey('description')
  @TableModel(BookDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory BookDetailModel({
    @JsonKey(name: BookDetailModel.idKey) required BookId id,
    @JsonKey(name: BookDetailModel.ownerIdKey) required ProfileId ownerId,
    @JsonKey(name: BookDetailModel.titleKey) required String title,
    @JsonKey(name: BookDetailModel.authorKey) required String author,
    @JsonKey(name: BookDetailModel.conditionKey) required int condition,
    @JsonKey(name: BookDetailModel.imageKey) required ImageObject? image,
    @JsonKey(name: BookDetailModel.createdAtKey) required DateTime createdAt,
    @JsonKey(name: BookDetailModel.updatedAtKey) required DateTime updatedAt,
    @JoinedColumn(foreignKey: "owner_id", candidateKey: "id")
    @JsonKey(name: BookDetailModel.ownerKey)
    required ProfileLiteModel? owner,
    @JsonKey(name: BookDetailModel.descriptionKey) required String? description,
  }) = _BookDetailModel;

  /// Creates an instance of BookDetailModel from a JSON map.
  factory BookDetailModel.fromJson(Map<String, dynamic> json) =>
      _$BookDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableBookDetailModel;

  /// Table name: `books`
  static const String tableName = "books";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for ownerId field with JsonKey('owner_id')
  static const String ownerIdKey = "owner_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for condition field with JsonKey('condition')
  static const String conditionKey = "condition";

  /// Field name for image field with JsonKey('image_url')
  static const String imageKey = "image_url";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for updatedAt field with JsonKey('updated_at')
  static const String updatedAtKey = "updated_at";

  /// Field name for owner field with JsonKey('owner')
  /// This is json key for joined field. with foreign key: owner_id and candidate key: id
  static const String ownerKey = "owner";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Converts this model to a base model.
  BookModel toBookModel() {
    return BookModel(
      id: id,
      ownerId: ownerId,
      title: title,
      author: author,
      condition: condition,
      image: image,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
}

/// Represents the BookCreateParam model. generated by kimapp_generator
@freezed
class BookCreateParam with _$BookCreateParam implements BaseBookSchema {
  const BookCreateParam._();

  /// Constructor for BookCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId ownerId : JsonKey('owner_id')
  /// - String title : JsonKey('title')
  /// - String author : JsonKey('author')
  /// - String? description : JsonKey('description')
  /// - ImageObject? image : JsonKey('image_url')
  /// - int? condition : JsonKey('condition')
  @JsonSerializable(explicitToJson: true)
  const factory BookCreateParam({
    @JsonKey(name: BookCreateParam.ownerIdKey) required ProfileId ownerId,
    @JsonKey(name: BookCreateParam.titleKey) required String title,
    @JsonKey(name: BookCreateParam.authorKey) required String author,
    @JsonKey(name: BookCreateParam.descriptionKey) required String? description,
    @JsonKey(name: BookCreateParam.imageKey) required ImageObject? image,
    @JsonKey(name: BookCreateParam.conditionKey) required int? condition,
  }) = _BookCreateParam;

  /// Creates an instance of BookCreateParam from a JSON map.
  factory BookCreateParam.fromJson(Map<String, dynamic> json) =>
      _$BookCreateParamFromJson(json);

  /// Field name for ownerId field with JsonKey('owner_id')
  static const String ownerIdKey = "owner_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for image field with JsonKey('image_url')
  static const String imageKey = "image_url";

  /// Field name for condition field with JsonKey('condition')
  static const String conditionKey = "condition";
}

/// Represents the BookUpdateParam model. generated by kimapp_generator
@freezed
class BookUpdateParam with _$BookUpdateParam implements BaseBookSchema {
  const BookUpdateParam._();

  /// Constructor for BookUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId ownerId : JsonKey('owner_id')
  /// - String title : JsonKey('title')
  /// - String author : JsonKey('author')
  /// - String? description : JsonKey('description')
  /// - ImageObject? image : JsonKey('image_url')
  /// - int condition : JsonKey('condition')
  @JsonSerializable(explicitToJson: true)
  const factory BookUpdateParam({
    @JsonKey(name: BookUpdateParam.ownerIdKey) required ProfileId ownerId,
    @JsonKey(name: BookUpdateParam.titleKey) required String title,
    @JsonKey(name: BookUpdateParam.authorKey) required String author,
    @JsonKey(name: BookUpdateParam.descriptionKey) required String? description,
    @JsonKey(name: BookUpdateParam.imageKey) required ImageObject? image,
    @JsonKey(name: BookUpdateParam.conditionKey) required int condition,
  }) = _BookUpdateParam;

  /// Creates an instance of BookUpdateParam from a JSON map.
  factory BookUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$BookUpdateParamFromJson(json);

  /// Field name for ownerId field with JsonKey('owner_id')
  static const String ownerIdKey = "owner_id";

  /// Field name for title field with JsonKey('title')
  static const String titleKey = "title";

  /// Field name for author field with JsonKey('author')
  static const String authorKey = "author";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for image field with JsonKey('image_url')
  static const String imageKey = "image_url";

  /// Field name for condition field with JsonKey('condition')
  static const String conditionKey = "condition";
}
