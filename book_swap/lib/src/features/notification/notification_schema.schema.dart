// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:book_swap/src/features/profile/profile_schema.schema.dart';
import 'notification_schema.dart';

part 'notification_schema.schema.freezed.dart';
part 'notification_schema.schema.g.dart';

/// Defines the table structure for Notification.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class NotificationTable {
  const NotificationTable._();

  /// The name of the database table for Notification entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "notifications";

  /// Column: id
  /// This is the primary key column for the Notification table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: user_id
  /// Data type: `ProfileId`
  /// Key: `user_id`
  static const String userId = "user_id";

  /// Column: content
  /// Data type: `String`
  /// Key: `content`
  static const String content = "content";

  /// Column: read
  /// Data type: `bool`
  /// Key: `read`
  static const String read = "read";

  /// Column: related_trade_id
  /// Data type: `int?`
  /// Key: `related_trade_id`
  static const String relatedTradeId = "related_trade_id";

  /// Column: notification_type
  /// Data type: `String`
  /// Key: `notification_type`
  static const String notificationType = "notification_type";

  /// Column: created_at
  /// Data type: `DateTime`
  /// Key: `created_at`
  static const String createdAt = "created_at";

  /// Column: user_id
  /// This is a join key for field user.
  /// Data type: `ProfileLiteModel`
  /// Key: `user`
  static const String user = "user";
}

/// Represents the unique identifier for a Notification.
/// This class wraps the `int` value, providing type safety and encapsulation.
class NotificationId extends Identity<int> {
  const NotificationId._(this.value);

  @override
  final int value;

  /// Creates an instance of NotificationId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory NotificationId.fromJson(dynamic value) {
    if (value is int) {
      return NotificationId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of NotificationId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of NotificationId from a int value.
  factory NotificationId.fromValue(int value) {
    return NotificationId._(value);
  }

  /// Creates an instance of NotificationId with a value of -1.
  /// This is used to represent an empty or invalid NotificationId for placeholder or default values of form fields.
  /// WARNING: This is not a valid NotificationId access it value through [value] or [call] will throw an error.
  factory NotificationId.empty() => NotificationId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseNotificationSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class INotificationModel {
  NotificationId get id;
  ProfileId get userId;
  String get content;
  bool get read;
  int? get relatedTradeId;
  String get notificationType;
  DateTime get createdAt;
  ProfileLiteModel get user;
}

/// Base model class for NotificationModel.
@freezed
class NotificationModel
    with _$NotificationModel
    implements BaseNotificationSchema, INotificationModel {
  const NotificationModel._();

  /// Constructor for NotificationModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`notifications`)
  ///
  /// Fields:
  /// - NotificationId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String content : JsonKey('content')
  /// - bool read : JsonKey('read')
  /// - int? relatedTradeId : JsonKey('related_trade_id')
  /// - String notificationType : JsonKey('notification_type')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  @TableModel(NotificationModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory NotificationModel({
    @JsonKey(name: NotificationModel.idKey) required NotificationId id,
    @JsonKey(name: NotificationModel.userIdKey) required ProfileId userId,
    @JsonKey(name: NotificationModel.contentKey) required String content,
    @JsonKey(name: NotificationModel.readKey) required bool read,
    @JsonKey(name: NotificationModel.relatedTradeIdKey)
    required int? relatedTradeId,
    @JsonKey(name: NotificationModel.notificationTypeKey)
    required String notificationType,
    @JsonKey(name: NotificationModel.createdAtKey) required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: NotificationModel.userKey)
    required ProfileLiteModel user,
  }) = _NotificationModel;

  /// Creates an instance of NotificationModel from a JSON map.
  factory NotificationModel.fromJson(Map<String, dynamic> json) =>
      _$NotificationModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableNotificationModel;

  /// Table name: `notifications`
  static const String tableName = "notifications";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for content field with JsonKey('content')
  static const String contentKey = "content";

  /// Field name for read field with JsonKey('read')
  static const String readKey = "read";

  /// Field name for relatedTradeId field with JsonKey('related_trade_id')
  static const String relatedTradeIdKey = "related_trade_id";

  /// Field name for notificationType field with JsonKey('notification_type')
  static const String notificationTypeKey = "notification_type";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";
}

/// Represents the NotificationLiteModel model. generated by kimapp_generator
@freezed
class NotificationLiteModel
    with _$NotificationLiteModel
    implements BaseNotificationSchema {
  const NotificationLiteModel._();

  /// Constructor for NotificationLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `notifications`
  ///
  /// Fields:
  /// - NotificationId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String content : JsonKey('content')
  /// - bool read : JsonKey('read')
  /// - String notificationType : JsonKey('notification_type')
  /// - DateTime createdAt : JsonKey('created_at')
  @TableModel(NotificationLiteModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory NotificationLiteModel({
    @JsonKey(name: NotificationLiteModel.idKey) required NotificationId id,
    @JsonKey(name: NotificationLiteModel.userIdKey) required ProfileId userId,
    @JsonKey(name: NotificationLiteModel.contentKey) required String content,
    @JsonKey(name: NotificationLiteModel.readKey) required bool read,
    @JsonKey(name: NotificationLiteModel.notificationTypeKey)
    required String notificationType,
    @JsonKey(name: NotificationLiteModel.createdAtKey)
    required DateTime createdAt,
  }) = _NotificationLiteModel;

  /// Creates an instance of NotificationLiteModel from a JSON map.
  factory NotificationLiteModel.fromJson(Map<String, dynamic> json) =>
      _$NotificationLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableNotificationLiteModel;

  /// Table name: `notifications`
  static const String tableName = "notifications";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for content field with JsonKey('content')
  static const String contentKey = "content";

  /// Field name for read field with JsonKey('read')
  static const String readKey = "read";

  /// Field name for notificationType field with JsonKey('notification_type')
  static const String notificationTypeKey = "notification_type";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";
}

/// Represents the NotificationDetailModel model. generated by kimapp_generator
@freezed
class NotificationDetailModel
    with _$NotificationDetailModel
    implements BaseNotificationSchema, INotificationModel {
  const NotificationDetailModel._();

  /// Constructor for NotificationDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `notifications`
  ///
  /// Fields:
  /// - NotificationId id : JsonKey('id')
  /// - ProfileId userId : JsonKey('user_id')
  /// - String content : JsonKey('content')
  /// - bool read : JsonKey('read')
  /// - int? relatedTradeId : JsonKey('related_trade_id')
  /// - String notificationType : JsonKey('notification_type')
  /// - DateTime createdAt : JsonKey('created_at')
  /// - ProfileLiteModel user : JsonKey('user')
  @TableModel(NotificationDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory NotificationDetailModel({
    @JsonKey(name: NotificationDetailModel.idKey) required NotificationId id,
    @JsonKey(name: NotificationDetailModel.userIdKey) required ProfileId userId,
    @JsonKey(name: NotificationDetailModel.contentKey) required String content,
    @JsonKey(name: NotificationDetailModel.readKey) required bool read,
    @JsonKey(name: NotificationDetailModel.relatedTradeIdKey)
    required int? relatedTradeId,
    @JsonKey(name: NotificationDetailModel.notificationTypeKey)
    required String notificationType,
    @JsonKey(name: NotificationDetailModel.createdAtKey)
    required DateTime createdAt,
    @JoinedColumn(foreignKey: "user_id", candidateKey: "id")
    @JsonKey(name: NotificationDetailModel.userKey)
    required ProfileLiteModel user,
  }) = _NotificationDetailModel;

  /// Creates an instance of NotificationDetailModel from a JSON map.
  factory NotificationDetailModel.fromJson(Map<String, dynamic> json) =>
      _$NotificationDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableNotificationDetailModel;

  /// Table name: `notifications`
  static const String tableName = "notifications";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for content field with JsonKey('content')
  static const String contentKey = "content";

  /// Field name for read field with JsonKey('read')
  static const String readKey = "read";

  /// Field name for relatedTradeId field with JsonKey('related_trade_id')
  static const String relatedTradeIdKey = "related_trade_id";

  /// Field name for notificationType field with JsonKey('notification_type')
  static const String notificationTypeKey = "notification_type";

  /// Field name for createdAt field with JsonKey('created_at')
  static const String createdAtKey = "created_at";

  /// Field name for user field with JsonKey('user')
  /// This is json key for joined field. with foreign key: user_id and candidate key: id
  static const String userKey = "user";

  /// Converts this model to a base model.
  NotificationModel toNotificationModel() {
    return NotificationModel(
      id: id,
      userId: userId,
      content: content,
      read: read,
      relatedTradeId: relatedTradeId,
      notificationType: notificationType,
      createdAt: createdAt,
      user: user,
    );
  }
}

/// Represents the NotificationCreateParam model. generated by kimapp_generator
@freezed
class NotificationCreateParam
    with _$NotificationCreateParam
    implements BaseNotificationSchema {
  const NotificationCreateParam._();

  /// Constructor for NotificationCreateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - ProfileId userId : JsonKey('user_id')
  /// - String content : JsonKey('content')
  /// - int? relatedTradeId : JsonKey('related_trade_id')
  /// - String notificationType : JsonKey('notification_type')
  @JsonSerializable(explicitToJson: true)
  const factory NotificationCreateParam({
    @JsonKey(name: NotificationCreateParam.userIdKey) required ProfileId userId,
    @JsonKey(name: NotificationCreateParam.contentKey) required String content,
    @JsonKey(name: NotificationCreateParam.relatedTradeIdKey)
    required int? relatedTradeId,
    @JsonKey(name: NotificationCreateParam.notificationTypeKey)
    required String notificationType,
  }) = _NotificationCreateParam;

  /// Creates an instance of NotificationCreateParam from a JSON map.
  factory NotificationCreateParam.fromJson(Map<String, dynamic> json) =>
      _$NotificationCreateParamFromJson(json);

  /// Field name for userId field with JsonKey('user_id')
  static const String userIdKey = "user_id";

  /// Field name for content field with JsonKey('content')
  static const String contentKey = "content";

  /// Field name for relatedTradeId field with JsonKey('related_trade_id')
  static const String relatedTradeIdKey = "related_trade_id";

  /// Field name for notificationType field with JsonKey('notification_type')
  static const String notificationTypeKey = "notification_type";
}

/// Represents the NotificationUpdateParam model. generated by kimapp_generator
@freezed
class NotificationUpdateParam
    with _$NotificationUpdateParam
    implements BaseNotificationSchema {
  const NotificationUpdateParam._();

  /// Constructor for NotificationUpdateParam.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - bool? read : JsonKey('read')
  @JsonSerializable(explicitToJson: true)
  const factory NotificationUpdateParam({
    @JsonKey(name: NotificationUpdateParam.readKey) required bool? read,
  }) = _NotificationUpdateParam;

  /// Creates an instance of NotificationUpdateParam from a JSON map.
  factory NotificationUpdateParam.fromJson(Map<String, dynamic> json) =>
      _$NotificationUpdateParamFromJson(json);

  /// Field name for read field with JsonKey('read')
  static const String readKey = "read";
}
